function Intensity_Calc() {
    Orion.Print('Target the monster/pet you wish to appraise');
    Orion.WaitForAddObject('selectedTarget', 5000);
    var selectedTarget = Orion.FindObject('selectedTarget');

    if (selectedTarget) {
        Orion.Print('Selected target: ' + selectedTarget.Name());

        Orion.UseSkill('Animal Lore');
        Orion.WaitForTarget(1000);
        Orion.TargetObject(selectedTarget.Serial());

        if (Orion.WaitForGump(1000)) {
            var gump = Orion.GetLastGump();
            var textEntries = gump.TextList();

            var stripHTML = function(html) {
                return html.replace(/<[^>]*>?/gm, '');
            };

            var getStat = function(str) {
                var splitStr = str.split('/');
                return splitStr.length > 1 ? parseInt(splitStr[1]) : parseInt(splitStr[0]);
            };

            var getResistance = function(str) {
                return parseInt(str.replace('%',''));
            };

            var getSkill = function(str) {
                var splitStr = str.split('/');
                var value = splitStr.length > 0 ? parseFloat(splitStr[0]) : 0;
                return isNaN(value) ? 0 : value;
            };

            var attributes = {
                'Hits': isNaN(getStat(stripHTML(textEntries[1]))) ? 0 : getStat(stripHTML(textEntries[1])),
                'Stamina': isNaN(getStat(stripHTML(textEntries[2]))) ? 0 : getStat(stripHTML(textEntries[2])),
                'Mana': isNaN(getStat(stripHTML(textEntries[3]))) ? 0 : getStat(stripHTML(textEntries[3])),
                'Strength': isNaN(getStat(stripHTML(textEntries[4]))) ? 0 : getStat(stripHTML(textEntries[4])),
                'Dexterity': isNaN(getStat(stripHTML(textEntries[5]))) ? 0 : getStat(stripHTML(textEntries[5])),
                'Intelligence': isNaN(getStat(stripHTML(textEntries[6]))) ? 0 : getStat(stripHTML(textEntries[6])),
                'Physical Resistance': isNaN(getResistance(stripHTML(textEntries[11]))) ? 0 : getResistance(stripHTML(textEntries[11])),
                'Fire Resistance': isNaN(getResistance(stripHTML(textEntries[12]))) ? 0 : getResistance(stripHTML(textEntries[12])),
                'Cold Resistance': isNaN(getResistance(stripHTML(textEntries[13]))) ? 0 : getResistance(stripHTML(textEntries[13])),
                'Poison Resistance': isNaN(getResistance(stripHTML(textEntries[14]))) ? 0 : getResistance(stripHTML(textEntries[14])),
                'Energy Resistance': isNaN(getResistance(stripHTML(textEntries[15]))) ? 0 : getResistance(stripHTML(textEntries[15])),
                'Wrestling': getSkill(stripHTML(textEntries[22])),
                'Tactics': getSkill(stripHTML(textEntries[23])),
                'Resisting Spells': getSkill(stripHTML(textEntries[24])),
				'Magery': getSkill(stripHTML(textEntries[30])),
				'Evaluate Intelligence': getSkill(stripHTML(textEntries[33])),
                'Poisoning': getSkill(stripHTML(textEntries[27])),
            };

            var sumOfAttributes = 0;
            for (var attribute in attributes) {
                Orion.Print(attribute + ': ' + attributes[attribute]);
                if (attribute !== 'Wrestling' && attribute !== 'Tactics' && attribute !== 'Resisting Spells' && attribute !== 'Anatomy' && attribute !== 'Poisoning' && attribute !== 'Magery' && attribute !== 'Evaluate Intelligence') {
                    sumOfAttributes += attributes[attribute];
                } else {
                    if (attributes[attribute] > 100) {
                        sumOfAttributes += (attributes[attribute] - 100) * 10;
                    }
                }
            }

            Orion.Print('Power: ' + sumOfAttributes);

            var minMaxValues = {
                'a cu sidhe': { min: 3245, max: 3675 },
                'a greater dragon': { min: 3390, max: 5411 },
                'a dragon': { min: 2523, max: 2735 },
                'a cold drake': { min: 2048, max: 2299 },
                'a fire steed': { min: 1546, max: 1710 },
                'a fire beetle': { min: 1595, max: 1885 },
                'a giant beetle': { min: 1880, max: 1885 },
                'a white wyrm': { min: 2358, max: 2611 },
                'a hiryu': { min: 3020, max: 3735 },
                'a lesser hiryu': { min: 1570, max: 2185 },
                'a najasaurus': { min: 1561, max: 2141 },
                'a nightmare': { min: 1303, max: 1535 },
                'a rune beetle': { min: 1935, max: 2385 },
                'a serpentine dragon': { min: 3130, max: 3320 },
                'a frost mite': { min: 2840, max: 3251 },
            };

            var targetMinMax = minMaxValues[selectedTarget.Name()];
            if (targetMinMax) {
                var percentile = ((sumOfAttributes - targetMinMax.min) / (targetMinMax.max - targetMinMax.min)) * 100;
                Orion.Print('Percentile: ' + percentile.toFixed(2) + '%');
            } else {
                Orion.Print('Target not found in minMaxValues');
            }
        } else {
            Orion.Print('Failed to open gump');
        }
    } else {
        Orion.Print('Failed to select target');
    }
}
